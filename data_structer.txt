// data structure for Quiz Screen

data = [
  {
    allSavedOnes: {
      ids: [22, 33, 44], // ids examples
    },
  },
];

//  Verse Example : "Ni ö Jwøki ni cwøl kuna en maal ni maal. Ni tïm pinynyi ni da abøøya ka amöölla."

//  WordToExtract : "cwøl kuna"

suggestion: [
  {
    id: 1,
    isTheTrueOne: true,
    word: 'cwøl kuna',
  },
  {
    id: 2,
    isTheTrueOne: false,
    word: 'pinynyi',
  },
  {
    id: 3,
    isTheTrueOne: false,
    word: 'abøøya',
  },
];




 luser bch ychuf 7ezmtt lyom o l7ezmet li fetouu lkol with stpes progress indicateur so kul 7ezma lezm nzidoha win wsal luser tao fi steps

// steps conception : 

// we have 3 words * 4 = 12 words per wordHezma

// that's mean steps = 100 / 12 for the 4 stages of words discovring and then the random quiz to practise session 



// that's mean if it's 100/12 * 12 so we reach the random tests step

next steps :
  -/- fix why first word repeat  //DONE
  -/- make the progress of 3 * 4 words work  //DONE
  -/- build screen between each 3 words to inform the user where he is now //DONE
  -/- build last screen to go to the random test to show on the end of the loop //DONE
  -/- add the sound for each words //DONE
  -/- ** Conception for the rest of the scope of the work  REDUX + FIREBASE + LOCAL_STORAGE !!! //DONE
  -/- build the cards screen to add words dynamicaly //DONE
  -/- work with local storage to store user data locally
  -/- integrate firebase and syncronize it with local db //DONE
  -/- work with static management with redux and static component 
  -/- build the custom work builder screen



Design :: 
 -*- wordOutro Page Redesign
 -*- +3 Words Success Page Redesign
 -*- Final Page Before Random Test : after Loop of 12 words




Other Conception : 

for the first screen we need to show the user some words of all the words that we have in our database and this need to be handled for every time the user see this screen which words need to be showen




Level : 5 level of fluency {
    1 : Super Beginner ,
    2 : Beginner ,
    3 : Intermediate,
    4 : Advanced,
    5 : Super Advanced
}  => actualy we need a description for each level to show to the user  



database :{
  word:{
    wordiId:(documentId),
    translations:{
        Arabic:{
          word:wordItSelf,
          example:WordExample,
          wordAudio:audioUrl
        },
        Chinese,
        Japanese,
        French,
        English,
        German,
        Italian,
        Spanish, {...}
    }
    wordImage:imageUrl
    level:3,
  }
}


 

userId + data = [



  {
    wordsHezmet: [
      {
        wordHezma,
        wordHezmaID,
        wordHezmaTimeStamp,
        stepReached
      },
    ],
  },



];




collections : [
  wordsCollection,
  usersCollection,
  wordHezmetCollection,
]


steps : {
  // create the database //DONE
  // choose 20 words and fill in all the details for them //DONE
  // create the home screen of the app : header and cards //DONE
  // read data to home screen dynamicaly //DONE
}





// 1 // Add 40 Words To Firebase // Done
// -2 // Make design for header home page // Done
// 2 // Create the Header of the home page // Done
// 3 // Create The Ui of card of one words // Done
// 4 // Loop from firebase to show all the words // Done
// 5 // Create the ADD TO BAG fucntion and sync it with the Header 12 words Limit // Done
// 6 // Add the words of the Bag to the local Storage and Firebase to store it for the user // InProgress
// 7 // Create the transition between add to bag and start learning session to go to the Loop




sessionWords => idUser => {
  sessionsWordsOfThisUser :{
    idsOfWordsToLearnNow : [],
    timeStamp,
    stepReached
  }
}


 **** Steps 2  ****
          After Adding Words of this bag to firebase sessionWords collection : 

  // 1 // navigate to Loop and use the words in bag // Done
  // 2 // add all the effects to the homescreen after creation of the bag : 
          - 12 Words Limit Checker // Done
          - Toogle Btns of add to bag to Checked and change their functions to remove // Done
          - Toogle Create Bag btn  // Done
          - Change The rest of the words add btns to show premuim options // NOT NOW
          - Check If there is a wordsbag already or not on launching // Done
          - Change Header And Add Some Design to show that we are in a session now and we need to finish it // Done
  // 3 // Create the Loop Tab Page Screen to show the words in bag right now and statics and step reached ( good , very good , fantastic)  // Canceled and replaced in the Home Page
  // 4 // Complete The Loop ( this is a lot of work : tests / static )
  // 5 // Add The Splash Loading Data Screens with modern loading speeners
  // 6 // ** FEATURES OF PREMUIM VERSION OF THE APP **
  // 7 // User Registration and choosing level and languages etc ...
  // 8 // Using Local Storage To speed up the app





  btn Toogling : Add => Added => Removed




  Contenu of the main screen with wordsbag :
  
  - header with hello or something to Motivate
  - showing the progress step which where is it this words bag right now 
  - Showing the timer with the time left for the next words bag
  - Showing a button to continue this words bag
  - Purshase Card



    Contenu of the main screen 'without' wordsbag :

  - header with hello or something to Motivate
  - Card of word of the day with example to Ask The User to purshase to see all the words with examples
  - the normal words cards






  +++ on loading home page on check in the local storage to see if we have a words bag not completed or not 

  wordsBag : {id , step}

  

  Nice (1 repetion)
   Good (2 repetion)
    Fantastic (3 repetion)


after creating a bag add the bag with the id + all steps required to local storage and the time of the timer // Done
for every Launching check if there is a bag or not to choose the layout that will be rendered // Done

Local : {
  wordsBagId:'',
  repeatedNbr:0,
  step:0,
  timeOfCreation:,
}

timer get the date



  5:50pm

  1:50am


  00:20am


  90mins





  // Update the progress bars with data of steps reached in the local :
      lets say that there is 5 steps so 1*20 to extract the percentage value of the step // Done
  // Go To The Loop